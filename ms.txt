-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | metric spaces
--   
--   A <a>MetricSpace</a> is a set together with a notion of distance
--   between elements. Distance is computed by a function <a>dist</a> which
--   has the following four laws:
--   
--   <ol>
--   <li><b>non-negative</b>: <tt>forall x y. <a>dist</a> x y &gt;=
--   0</tt></li>
--   <li><b>identity of indiscernibles</b>: <tt>forall x y. <a>dist</a> x y
--   == 0 &lt;=&gt; x == y</tt></li>
--   <li><b>symmetry</b>: <tt>forall x y. dist x y == <a>dist</a> y
--   x</tt></li>
--   <li><b>triangle inequality</b>: <tt>forall x y z. <a>dist</a> x z
--   &lt;= <a>dist</a> x y + <a>dist</a> y z</tt></li>
--   </ol>
--   
--   See the Wikipedia <a>article on metric spaces</a> for more details.
@package ms
@version 0.1


-- | A <a>MetricSpace</a> is a set together with a notion of distance
--   between elements. Distance is computed by a function <a>dist</a> which
--   has the following four laws:
--   
--   <ol>
--   <li><b>non-negative</b>: <tt>forall x y. <a>dist</a> x y &gt;=
--   0</tt></li>
--   <li><b>identity of indiscernibles</b>: <tt>forall x y. <a>dist</a> x y
--   == 0 &lt;=&gt; x == y</tt></li>
--   <li><b>symmetry</b>: <tt>forall x y. dist x y == <a>dist</a> y
--   x</tt></li>
--   <li><b>triangle inequality</b>: <tt>forall x y z. <a>dist</a> x z
--   &lt;= <a>dist</a> x y + <a>dist</a> y z</tt></li>
--   </ol>
--   
--   See the Wikipedia
--   &lt;<a>https://en.wikipedia.org/wiki/Metric_space</a> article on
--   metric spaces&gt; for more details.
module Math.MetricSpace
newtype MetricSpace a b
[MetricSpace] :: (a -> a -> b) -> MetricSpace a b
[dist] :: MetricSpace a b -> a -> a -> b
type ClosedMetricSpace a = MetricSpace a a
newtype FlippedMetricSpace b a
[FlippedMetricSpace] :: (MetricSpace a b) -> FlippedMetricSpace b a
type ClosedFlippedMetricSpace a = FlippedMetricSpace a a
(<->) :: MetricSpace a b -> a -> a -> b
_FlippedMetricSpace :: Iso (MetricSpace a b) (MetricSpace x y) (FlippedMetricSpace b a) (FlippedMetricSpace y x)
class SwappedMetricSpace m
_SwappedMetricSpace :: SwappedMetricSpace m => Iso (m a b) (m x y) (m a b) (m x y)

-- | Levenshtein distance between <a>String</a>s.
--   
--   <pre>
--   &gt;&gt;&gt; dist levenshtein "foo" "bar"
--   3.0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; dist levenshtein "hi" "ha"
--   1.0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; dist levenshtein "ff" "ff"
--   0.0
--   </pre>
levenshtein :: Floating b => MetricSpace String b

-- | Discrete distance over n-dimensional <tt>Vector</tt>s.
--   
--   <pre>
--   &gt;&gt;&gt; dist discrete (V.fromList [3,4]) (V.fromList [3,4])
--   0.0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; dist discrete (V.fromList [1,49]) (V.fromList [3,-94])
--   1.0
--   </pre>
discrete :: (Eq a, Floating b) => MetricSpace (Vector a) b

-- | Euclidean distance over n-dimensional <tt>Vector</tt>s.
--   
--   <pre>
--   &gt;&gt;&gt; dist euclidean (V.fromList [3,4]) (V.fromList [3,4])
--   0.0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; dist euclidean (V.fromList [1,49]) (V.fromList [3,-94])
--   143.01398533010678
--   </pre>
euclidean :: RealFloat a => MetricSpace (Vector a) a

-- | Taxicab distance over n-dimensional <tt>Vector</tt>s.
--   
--   <pre>
--   &gt;&gt;&gt; dist taxicab (V.fromList [3,4]) (V.fromList [3,4])
--   0.0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; dist taxicab (V.fromList [1,49]) (V.fromList [3,-94])
--   145.0
--   </pre>
taxicab :: RealFloat a => MetricSpace (Vector a) a
instance Functor (MetricSpace a)
instance Applicative (MetricSpace a)
instance Monad (MetricSpace a)
instance Semigroup b => Semigroup (MetricSpace a b)
instance Monoid b => Monoid (MetricSpace a b)
instance Profunctor MetricSpace
instance Contravariant (FlippedMetricSpace b)
instance Monoid b => Divisible (FlippedMetricSpace b)
instance SwappedMetricSpace MetricSpace
instance SwappedMetricSpace FlippedMetricSpace
